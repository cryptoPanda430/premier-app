{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport background from \"../../../assets/game_background.png\";\nimport IconButton from \"../global/ui/IconButton\";\n\nvar RockPaperScissorsLizardSpock = function RockPaperScissorsLizardSpock() {\n  var _useState = useState({\n    player: 0,\n    opponent: 0,\n    draw: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      score = _useState2[0],\n      setScore = _useState2[1];\n\n  var _useState3 = useState('❓ VS ❓'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      turn = _useState4[0],\n      setTurn = _useState4[1];\n\n  var _useState5 = useState('Let\\'s play'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var hands = [{\n    icon: '✊',\n    name: 'Rock'\n  }, {\n    icon: '✋',\n    name: 'Paper'\n  }, {\n    icon: '✌️',\n    name: 'Scissors'\n  }, {\n    icon: '👌',\n    name: 'Lizard'\n  }, {\n    icon: '🖖',\n    name: 'Spock'\n  }];\n\n  var getOpponentChoice = function getOpponentChoice() {\n    return hands[Math.floor(Math.random() * hands.length)];\n  };\n\n  var getWinner = function getWinner(playerChoice, opponentChoice) {\n    var winningScheme = {\n      Rock: ['Scissors', 'Lizard'],\n      Scissors: ['Paper', 'Lizard'],\n      Paper: ['Rock', 'Spock'],\n      Lizard: ['Paper', 'Spock'],\n      Spock: ['Rock', 'Scissors']\n    };\n\n    if (playerChoice === opponentChoice) {\n      setScore(_objectSpread(_objectSpread({}, score), {}, {\n        draw: score.draw + 1\n      }));\n      return 'Draw';\n    }\n\n    if (winningScheme[playerChoice].indexOf(opponentChoice) !== -1) {\n      setScore(_objectSpread(_objectSpread({}, score), {}, {\n        player: score.player + 1\n      }));\n      return 'Victory';\n    }\n\n    setScore(_objectSpread(_objectSpread({}, score), {}, {\n      opponent: score.opponent + 1\n    }));\n    return 'Defeat';\n  };\n\n  var handleChoice = function handleChoice(choice) {\n    var opponent = getOpponentChoice();\n    var result = getWinner(choice.name, opponent.name);\n    setTurn(choice.icon + \" VS \" + opponent.icon);\n    setMessage(result);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Text, null, \"Player: \" + score.player + \" | Draw: \" + score.draw + \" | Opponent: \" + score.opponent), React.createElement(Text, {\n    style: {\n      fontSize: 42,\n      marginTop: 20\n    }\n  }, turn), React.createElement(Text, {\n    style: {\n      fontSize: 23,\n      marginBottom: 20\n    }\n  }, message), React.createElement(Text, null, \"Choose your Hand:\"), React.createElement(ImageBackground, {\n    source: background,\n    style: styles.imageBackground\n  }, hands.map(function (hand) {\n    return React.createElement(IconButton, {\n      key: hand.name,\n      icon: hand.icon,\n      size: 42,\n      customStyles: _objectSpread(_objectSpread({}, styles.hands), styles[\"hand\" + hand.name]),\n      onPress: function onPress() {\n        return handleChoice(hand);\n      }\n    });\n  })));\n};\n\nvar diameter = 380;\nvar circleRadius = 40;\nvar styles = StyleSheet.create({\n  imageBackground: {\n    width: diameter,\n    height: diameter,\n    resizeMode: 'cover',\n    justifyContent: 'center'\n  },\n  hands: {\n    position: 'absolute',\n    width: circleRadius * 2,\n    height: circleRadius * 2,\n    borderRadius: 100,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  handRock: {\n    top: diameter * 0.233 - circleRadius,\n    left: diameter / 2 - circleRadius\n  },\n  handPaper: {\n    top: diameter * 0.445 - circleRadius,\n    left: diameter * 0.223 - circleRadius\n  },\n  handScissors: {\n    bottom: diameter * 0.237 - circleRadius,\n    left: diameter * 0.328 - circleRadius\n  },\n  handLizard: {\n    top: diameter * 0.445 - circleRadius,\n    right: diameter * 0.223 - circleRadius\n  },\n  handSpock: {\n    bottom: diameter * 0.237 - circleRadius,\n    right: diameter * 0.328 - circleRadius\n  }\n});\nexport default RockPaperScissorsLizardSpock;","map":{"version":3,"sources":["E:/Projects/Native/premier-app/src/components/other/RockPaperScissorsLizardSpock.jsx"],"names":["React","useState","background","IconButton","RockPaperScissorsLizardSpock","player","opponent","draw","score","setScore","turn","setTurn","message","setMessage","hands","icon","name","getOpponentChoice","Math","floor","random","length","getWinner","playerChoice","opponentChoice","winningScheme","Rock","Scissors","Paper","Lizard","Spock","indexOf","handleChoice","choice","result","fontSize","marginTop","marginBottom","styles","imageBackground","map","hand","diameter","circleRadius","StyleSheet","create","width","height","resizeMode","justifyContent","position","borderRadius","alignItems","handRock","top","left","handPaper","handScissors","bottom","handLizard","right","handSpock"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Text, ImageBackground, StyleSheet } from 'react-native'\r\nimport background from '../../../assets/game_background.png'\r\nimport IconButton from '../global/ui/IconButton'\r\n\r\nconst RockPaperScissorsLizardSpock = () => {\r\n    const [score, setScore] = useState({ player: 0, opponent: 0, draw: 0 })\r\n    const [turn, setTurn] = useState('❓ VS ❓')\r\n    const [message, setMessage] = useState('Let\\'s play')\r\n\r\n    const hands = [\r\n        { icon: '✊', name: 'Rock' },\r\n        { icon: '✋', name: 'Paper' },\r\n        { icon: '✌️', name: 'Scissors' },\r\n        { icon: '👌', name: 'Lizard' },\r\n        { icon: '🖖', name: 'Spock' },\r\n    ]\r\n\r\n    const getOpponentChoice = () => hands[Math.floor(Math.random() * hands.length)]\r\n\r\n    const getWinner = (playerChoice, opponentChoice) => {\r\n        const winningScheme = {\r\n            Rock: ['Scissors', 'Lizard'],\r\n            Scissors: ['Paper', 'Lizard'],\r\n            Paper: ['Rock', 'Spock'],\r\n            Lizard: ['Paper', 'Spock'],\r\n            Spock: ['Rock', 'Scissors'],\r\n        }\r\n\r\n        if (playerChoice === opponentChoice) {\r\n            setScore({ ...score, draw: score.draw + 1 })\r\n            return 'Draw'\r\n        }\r\n\r\n        if (winningScheme[playerChoice].indexOf(opponentChoice) !== -1) {\r\n            setScore({ ...score, player: score.player + 1 })\r\n            return 'Victory'\r\n        }\r\n\r\n        setScore({ ...score, opponent: score.opponent + 1 })\r\n        return 'Defeat'\r\n    }\r\n\r\n    const handleChoice = (choice) => {\r\n        const opponent = getOpponentChoice()\r\n        const result = getWinner(choice.name, opponent.name)\r\n        setTurn(`${choice.icon} VS ${opponent.icon}`)\r\n        setMessage(result)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text>{`Player: ${score.player} | Draw: ${score.draw} | Opponent: ${score.opponent}`}</Text>\r\n\r\n            <Text style={{ fontSize: 42, marginTop: 20 }}>{turn}</Text>\r\n\r\n            <Text style={{ fontSize: 23, marginBottom: 20 }}>{message}</Text>\r\n\r\n            <Text>Choose your Hand:</Text>\r\n\r\n            <ImageBackground\r\n                source={background}\r\n                style={styles.imageBackground}\r\n            >\r\n                {hands.map((hand) => (\r\n                    <IconButton\r\n                        key={hand.name}\r\n                        icon={hand.icon}\r\n                        size={42}\r\n                        customStyles={{\r\n                            ...styles.hands,\r\n                            ...styles[`hand${hand.name}`],\r\n                        }}\r\n                        onPress={() => handleChoice(hand)}\r\n                    />\r\n                ))}\r\n            </ImageBackground>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst diameter = 380\r\nconst circleRadius = 40\r\n\r\nconst styles = StyleSheet.create({\r\n    imageBackground: {\r\n        width: diameter,\r\n        height: diameter,\r\n        resizeMode: 'cover',\r\n        justifyContent: 'center',\r\n    },\r\n    hands: {\r\n        position: 'absolute',\r\n        width: circleRadius * 2,\r\n        height: circleRadius * 2,\r\n        borderRadius: 100,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    handRock: {\r\n        top: diameter * 0.233 - circleRadius,\r\n        left: diameter / 2 - circleRadius,\r\n    },\r\n    handPaper: {\r\n        top: diameter * 0.445 - circleRadius,\r\n        left: diameter * 0.223 - circleRadius,\r\n    },\r\n    handScissors: {\r\n        bottom: diameter * 0.237 - circleRadius,\r\n        left: diameter * 0.328 - circleRadius,\r\n    },\r\n    handLizard: {\r\n        top: diameter * 0.445 - circleRadius,\r\n        right: diameter * 0.223 - circleRadius,\r\n    },\r\n    handSpock: {\r\n        bottom: diameter * 0.237 - circleRadius,\r\n        right: diameter * 0.328 - circleRadius,\r\n    },\r\n})\r\n\r\nexport default RockPaperScissorsLizardSpock\r\n"]},"metadata":{},"sourceType":"module"}