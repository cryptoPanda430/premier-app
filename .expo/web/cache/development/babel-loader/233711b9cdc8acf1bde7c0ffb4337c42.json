{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { userLogin } from \"../../redux/actions/user.actions\";\nimport BackgroundPage from \"../../components/global/layout/BackgroundPage\";\nimport backgroundImage from \"../../../assets/bg_abstract_01.jpg\";\nimport TextButton from \"../../components/global/ui/TextButton\";\n\nvar SceneLogin = function SceneLogin(_ref) {\n  var loginUser = _ref.loginUser,\n      isUserLoggedIn = _ref.isUserLoggedIn,\n      storedUserName = _ref.storedUserName;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  return React.createElement(BackgroundPage, {\n    background: backgroundImage\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: styles.headline\n  }, \"Enter your name here:\"), React.createElement(TextInput, {\n    style: styles.input,\n    onChangeText: function onChangeText(text) {\n      return setName(text);\n    },\n    value: name\n  }), React.createElement(TextButton, {\n    title: \"Login\",\n    type: \"secondary\",\n    onPress: function onPress() {\n      return loginUser(name || 'Anon');\n    }\n  }), isUserLoggedIn ? React.createElement(Text, null, \"Welcome, \" + storedUserName + \"!\") : undefined));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    borderColor: 'gray',\n    backgroundColor: 'white',\n    borderWidth: 3,\n    padding: 40,\n    borderRadius: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  headline: {\n    fontWeight: 'bold',\n    fontSize: 23\n  },\n  input: {\n    height: 50,\n    width: 200,\n    borderColor: 'gray',\n    backgroundColor: 'lightgray',\n    borderWidth: 3,\n    borderRadius: 3,\n    padding: 10,\n    margin: 10,\n    fontSize: 18\n  }\n});\nSceneLogin.defaultProps = {\n  storedUserName: ''\n};\nSceneLogin.propTypes = {\n  loginUser: PropTypes.func.isRequired,\n  isUserLoggedIn: PropTypes.bool.isRequired,\n  storedUserName: PropTypes.string\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    storedUserName: state.user.name,\n    isUserLoggedIn: state.user.isLoggedIn\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    loginUser: function loginUser(name) {\n      return dispatch(userLogin({\n        name: name\n      }));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SceneLogin);","map":{"version":3,"sources":["E:/Projects/Native/premier-app/src/scenes/auth/sceneLogin.jsx"],"names":["React","useState","connect","PropTypes","userLogin","BackgroundPage","backgroundImage","TextButton","SceneLogin","loginUser","isUserLoggedIn","storedUserName","name","setName","styles","container","headline","input","text","undefined","StyleSheet","create","borderColor","backgroundColor","borderWidth","padding","borderRadius","alignItems","justifyContent","fontWeight","fontSize","height","width","margin","defaultProps","propTypes","func","isRequired","bool","string","mapStateToProps","state","user","isLoggedIn","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport {\r\n    View, Text, TextInput, StyleSheet,\r\n} from 'react-native'\r\nimport { connect } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { userLogin } from '../../redux/actions/user.actions'\r\nimport BackgroundPage from '../../components/global/layout/BackgroundPage'\r\nimport backgroundImage from '../../../assets/bg_abstract_01.jpg'\r\nimport TextButton from '../../components/global/ui/TextButton'\r\n\r\nconst SceneLogin = ({ loginUser, isUserLoggedIn, storedUserName }) => {\r\n    const [name, setName] = useState('')\r\n\r\n    return (\r\n        <BackgroundPage background={backgroundImage}>\r\n            <View style={styles.container}>\r\n                <Text style={styles.headline}>\r\n                    Enter your name here:\r\n                </Text>\r\n                <TextInput\r\n                    style={styles.input}\r\n                    onChangeText={(text) => setName(text)}\r\n                    value={name}\r\n                />\r\n                <TextButton\r\n                    title=\"Login\"\r\n                    type=\"secondary\"\r\n                    onPress={() => loginUser(name || 'Anon')}\r\n                />\r\n\r\n                { isUserLoggedIn ? (<Text>{`Welcome, ${storedUserName}!`}</Text>) : undefined}\r\n            </View>\r\n\r\n        </BackgroundPage>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderColor: 'gray',\r\n        backgroundColor: 'white',\r\n        borderWidth: 3,\r\n        padding: 40,\r\n        borderRadius: 10,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    headline: {\r\n        fontWeight: 'bold',\r\n        fontSize: 23,\r\n    },\r\n    input: {\r\n        height: 50,\r\n        width: 200,\r\n        borderColor: 'gray',\r\n        backgroundColor: 'lightgray',\r\n        borderWidth: 3,\r\n        borderRadius: 3,\r\n        padding: 10,\r\n        margin: 10,\r\n        fontSize: 18,\r\n    },\r\n})\r\n\r\nSceneLogin.defaultProps = {\r\n    storedUserName: '',\r\n}\r\n\r\nSceneLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    isUserLoggedIn: PropTypes.bool.isRequired,\r\n    storedUserName: PropTypes.string,\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    storedUserName: state.user.name,\r\n    isUserLoggedIn: state.user.isLoggedIn,\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    loginUser: (name) => dispatch(userLogin({ name })),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SceneLogin)\r\n"]},"metadata":{},"sourceType":"module"}