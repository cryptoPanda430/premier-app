{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\n\nvar TextButton = function TextButton(_ref) {\n  var title = _ref.title,\n      _onPress = _ref.onPress,\n      type = _ref.type;\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return _onPress();\n    }\n  }, React.createElement(View, {\n    style: _objectSpread(_objectSpread({}, styles.baseButton), styles[type + \"Button\"])\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.baseText), styles[type + \"Text\"])\n  }, title)));\n};\n\nvar styles = StyleSheet.create({\n  baseButton: {\n    borderWidth: 3,\n    borderRadius: 8,\n    padding: 12,\n    overflow: 'hidden'\n  },\n  baseText: {\n    fontSize: 18,\n    textAlign: 'center',\n    fontWeight: 'bold'\n  },\n  defaultButton: {\n    backgroundColor: '#ccc',\n    borderColor: '#666'\n  },\n  defaultText: {\n    color: '#000'\n  },\n  primaryButton: {\n    backgroundColor: '#ff7100',\n    borderColor: '#ad5f00'\n  },\n  primaryText: {\n    color: '#fff'\n  },\n  secondaryButton: {\n    backgroundColor: '#1cb7ff',\n    borderColor: '#157fff'\n  },\n  secondaryText: {\n    color: '#fff'\n  },\n  successButton: {\n    backgroundColor: 'green',\n    borderColor: 'darkgreen'\n  },\n  successText: {\n    color: '#fff'\n  },\n  warningButton: {\n    backgroundColor: 'red',\n    borderColor: 'darkred'\n  },\n  warningText: {\n    color: '#fff'\n  }\n});\nTextButton.defaultProps = {\n  onPress: undefined,\n  type: 'default'\n};\nTextButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onPress: PropTypes.func,\n  type: PropTypes.oneOf(['default', 'primary', 'secondary', 'success', 'warning'])\n};\nexport default TextButton;","map":{"version":3,"sources":["E:/Projects/Native/premier-app/src/components/global/ui/TextButton.jsx"],"names":["React","PropTypes","TextButton","title","onPress","type","styles","baseButton","baseText","StyleSheet","create","borderWidth","borderRadius","padding","overflow","fontSize","textAlign","fontWeight","defaultButton","backgroundColor","borderColor","defaultText","color","primaryButton","primaryText","secondaryButton","secondaryText","successButton","successText","warningButton","warningText","defaultProps","undefined","propTypes","string","isRequired","func","oneOf"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MACfC,KADe,QACfA,KADe;AAAA,MAEfC,QAFe,QAEfA,OAFe;AAAA,MAGfC,IAHe,QAGfA,IAHe;AAAA,SAKf,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE;AAAA,aAAMD,QAAO,EAAb;AAAA;AAA3B,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAOE,MAAM,CAACC,UAAd,GAA6BD,MAAM,CAAID,IAAJ,YAAnC;AAAX,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,kCAAOC,MAAM,CAACE,QAAd,GAA2BF,MAAM,CAAID,IAAJ,UAAjC;AAAX,KACKF,KADL,CADJ,CADJ,CALe;AAAA,CAAnB;;AAcA,IAAMG,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,UAAU,EAAE;AACRI,IAAAA,WAAW,EAAE,CADL;AAERC,IAAAA,YAAY,EAAE,CAFN;AAGRC,IAAAA,OAAO,EAAE,EAHD;AAIRC,IAAAA,QAAQ,EAAE;AAJF,GADiB;AAO7BN,EAAAA,QAAQ,EAAE;AACNO,IAAAA,QAAQ,EAAE,EADJ;AAENC,IAAAA,SAAS,EAAE,QAFL;AAGNC,IAAAA,UAAU,EAAE;AAHN,GAPmB;AAY7BC,EAAAA,aAAa,EAAE;AACXC,IAAAA,eAAe,EAAE,MADN;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAZc;AAgB7BC,EAAAA,WAAW,EAAE;AACTC,IAAAA,KAAK,EAAE;AADE,GAhBgB;AAmB7BC,EAAAA,aAAa,EAAE;AACXJ,IAAAA,eAAe,EAAE,SADN;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAnBc;AAuB7BI,EAAAA,WAAW,EAAE;AACTF,IAAAA,KAAK,EAAE;AADE,GAvBgB;AA0B7BG,EAAAA,eAAe,EAAE;AACbN,IAAAA,eAAe,EAAE,SADJ;AAEbC,IAAAA,WAAW,EAAE;AAFA,GA1BY;AA8B7BM,EAAAA,aAAa,EAAE;AACXJ,IAAAA,KAAK,EAAE;AADI,GA9Bc;AAiC7BK,EAAAA,aAAa,EAAE;AACXR,IAAAA,eAAe,EAAE,OADN;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAjCc;AAqC7BQ,EAAAA,WAAW,EAAE;AACTN,IAAAA,KAAK,EAAE;AADE,GArCgB;AAwC7BO,EAAAA,aAAa,EAAE;AACXV,IAAAA,eAAe,EAAE,KADN;AAEXC,IAAAA,WAAW,EAAE;AAFF,GAxCc;AA4C7BU,EAAAA,WAAW,EAAE;AACTR,IAAAA,KAAK,EAAE;AADE;AA5CgB,CAAlB,CAAf;AAiDApB,UAAU,CAAC6B,YAAX,GAA0B;AACtB3B,EAAAA,OAAO,EAAE4B,SADa;AAEtB3B,EAAAA,IAAI,EAAE;AAFgB,CAA1B;AAKAH,UAAU,CAAC+B,SAAX,GAAuB;AACnB9B,EAAAA,KAAK,EAAEF,SAAS,CAACiC,MAAV,CAAiBC,UADL;AAEnB/B,EAAAA,OAAO,EAAEH,SAAS,CAACmC,IAFA;AAGnB/B,EAAAA,IAAI,EAAEJ,SAAS,CAACoC,KAAV,CAAgB,CAClB,SADkB,EAElB,SAFkB,EAGlB,WAHkB,EAIlB,SAJkB,EAKlB,SALkB,CAAhB;AAHa,CAAvB;AAYA,eAAenC,UAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {\n    StyleSheet,\n    Text,\n    View,\n    TouchableOpacity,\n} from 'react-native'\n\nconst TextButton = ({\n    title,\n    onPress,\n    type,\n}) => (\n    <TouchableOpacity onPress={() => onPress()}>\n        <View style={{ ...styles.baseButton, ...styles[`${type}Button`] }}>\n            <Text style={{ ...styles.baseText, ...styles[`${type}Text`] }}>\n                {title}\n            </Text>\n        </View>\n    </TouchableOpacity>\n)\n\nconst styles = StyleSheet.create({\n    baseButton: {\n        borderWidth: 3,\n        borderRadius: 8,\n        padding: 12,\n        overflow: 'hidden',\n    },\n    baseText: {\n        fontSize: 18,\n        textAlign: 'center',\n        fontWeight: 'bold',\n    },\n    defaultButton: {\n        backgroundColor: '#ccc',\n        borderColor: '#666',\n    },\n    defaultText: {\n        color: '#000',\n    },\n    primaryButton: {\n        backgroundColor: '#ff7100',\n        borderColor: '#ad5f00',\n    },\n    primaryText: {\n        color: '#fff',\n    },\n    secondaryButton: {\n        backgroundColor: '#1cb7ff',\n        borderColor: '#157fff',\n    },\n    secondaryText: {\n        color: '#fff',\n    },\n    successButton: {\n        backgroundColor: 'green',\n        borderColor: 'darkgreen',\n    },\n    successText: {\n        color: '#fff',\n    },\n    warningButton: {\n        backgroundColor: 'red',\n        borderColor: 'darkred',\n    },\n    warningText: {\n        color: '#fff',\n    },\n})\n\nTextButton.defaultProps = {\n    onPress: undefined,\n    type: 'default',\n}\n\nTextButton.propTypes = {\n    title: PropTypes.string.isRequired,\n    onPress: PropTypes.func,\n    type: PropTypes.oneOf([\n        'default',\n        'primary',\n        'secondary',\n        'success',\n        'warning',\n    ]),\n}\n\nexport default TextButton\n"]},"metadata":{},"sourceType":"module"}